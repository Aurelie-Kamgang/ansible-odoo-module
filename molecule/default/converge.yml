---
- name: Converge
  hosts: all
  gather_facts: false
  become: false

  pre_tasks:
    - name: Ensure Python 3 is present (bootstrap)
      ansible.builtin.raw: |
        test -e /usr/bin/python3 || \
        ( (command -v apt-get >/dev/null && apt-get update -y && apt-get install -y python3) || \
          (command -v dnf >/dev/null && dnf install -y python3) || \
          (command -v yum >/dev/null && yum install -y python3) )
      changed_when: false

    - name: Ensure 'pi' user exists
      ansible.builtin.user:
        name: pi
        shell: /bin/bash
        create_home: true

    - name: Ensure 'python' shim points to python3
      ansible.builtin.raw: |
        command -v python >/dev/null && exit 0
        if command -v apt-get >/dev/null; then
          apt-get update -y && apt-get install -y python-is-python3 || ln -sf /usr/bin/python3 /usr/bin/python
        elif command -v dnf >/dev/null || command -v yum >/dev/null; then
          (command -v dnf && dnf install -y python3) || (command -v yum && yum install -y python3)
          (command -v alternatives && alternatives --install /usr/bin/python python /usr/bin/python3 1) || ln -sf /usr/bin/python3 /usr/bin/python
        else
          ln -sf /usr/bin/python3 /usr/bin/python
        fi
      changed_when: false

    - name: Gather facts (after python available)
      ansible.builtin.setup:

    - name: Check name resolution for db and odoo
      ansible.builtin.shell: getent hosts {{ item }}
      register: dns_out
      changed_when: false
      loop: [ "db", "odoo" ]

    # --- NE PAS utiliser .State.Health : certains drivers ne l'exposent pas ---
    - name: Ensure DB container is running
      ansible.builtin.shell: docker inspect -f '{{ "{{.State.Status}}" }}' db
      register: db_state
      changed_when: false
      retries: 60
      delay: 5
      until: db_state.stdout.strip() == "running"
      delegate_to: localhost

    # --- Attendre PostgreSQL réellement prêt (dans le conteneur) ---
    - name: Wait until Postgres answers pg_isready
      ansible.builtin.shell: docker exec db pg_isready -U odoo -d testdb
      register: pgready
      changed_when: false
      retries: 90      # ~7,5 min
      delay: 5
      until: pgready.rc == 0
      delegate_to: localhost

    # --- L'init Odoo doit s'être terminée avec succès (exit 0) ---
    - name: Wait for odoo_init to finish successfully
      ansible.builtin.shell: docker inspect -f '{{ "{{.State.Status}} {{.State.ExitCode}}" }}' odoo_init
      register: odoo_init_state
      changed_when: false
      retries: 60
      delay: 5
      until: "'exited 0' in odoo_init_state.stdout"
      delegate_to: localhost

    # --- Récupérer les IPs réelles de db et odoo ---
    - name: Get container IPs (db, odoo)
      ansible.builtin.shell: docker inspect -f '{{ "{% raw %}{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}{% endraw %}" }}' {{ item }}
      register: ip_out
      changed_when: false
      loop: [ "db", "odoo" ]
      delegate_to: localhost

    - name: Set facts with real container IPs
      ansible.builtin.set_fact:
        db_host: "{{ (ip_out.results | selectattr('item','equalto','db')   | first).stdout | trim | default('db') }}"
        odoo_host: "{{ (ip_out.results | selectattr('item','equalto','odoo') | first).stdout | trim | default('odoo') }}"

    # --- Attendre Odoo HTTP par IP ---
    - name: Wait TCP 8069 (by IP)
      ansible.builtin.wait_for:
        host: "{{ odoo_host }}"
        port: 8069
        delay: 5
        timeout: 420

    - name: Wait for Odoo web login to answer 200
      ansible.builtin.uri:
        url: "http://{{ odoo_host }}:8069/web/login"
        status_code: 200
        return_content: false
      register: odoo_http
      retries: 30
      delay: 5
      until: odoo_http.status == 200

  roles:
    - role: diranetafen.odoo_module
      vars:
        odoo_host: "{{ odoo_host }}"
        odoo_url: "http://{{ odoo_host }}:8069"
        odoo_port: 8069
        odoo_admin_login: "admin"
        odoo_admin_password: "admin"
        odoo_database_name: "testdb"
        modules_to_install: []     # reste vide pour un test rapide
        modules_to_upgrade: []
        modules_to_uninstall: []
        odoo_timeout: 240          # évite le warning sur le nom 'timeout'

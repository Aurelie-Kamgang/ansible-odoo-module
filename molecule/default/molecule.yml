dependency:
  name: galaxy
  options:
    role-file: requirements.yml
    roles-path: "${MOLECULE_EPHEMERAL_DIRECTORY}/roles"
    force: true

driver:
  name: docker

platforms:
  # Base de données Postgres pour Odoo
  - name: db
    image: postgres:15-alpine
    pre_build_image: true
    environment:
      POSTGRES_USER: odoo
      POSTGRES_PASSWORD: odoo
      POSTGRES_DB: testdb

  # Odoo (init de la DB puis lancement normal)
  - name: odoo
    image: odoo:16
    pre_build_image: true
    environment:
      DB_HOST: db
      DB_USER: odoo
      DB_PASSWORD: odoo
    command: >
      bash -lc '
        # attendre que Postgres écoute
        for i in $(seq 1 120); do
          (echo >/dev/tcp/db/5432) >/dev/null 2>&1 && break
          echo "waiting for db..."; sleep 2
        done;
        # init DB avec le module de base puis lancer Odoo
        odoo -d testdb --db_host=db --db_user=odoo --db_password=odoo --without-demo=all -i base --stop-after-init;
        exec odoo -d testdb --db_host=db --db_user=odoo --db_password=odoo --without-demo=all
      '
    published_ports:
      - "8069:8069"

  # Hôte où Ansible applique le rôle (matrix via MOLECULE_IMAGE)
  - name: instance
    image: ${MOLECULE_IMAGE:-geerlingguy/docker-ubuntu2204-ansible}
    command: /sbin/init
    privileged: true
    cgroupns_mode: host
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:rw
    tmpfs:
      - /run
      - /tmp

provisioner:
  name: ansible
  playbooks:
    converge: converge.yml
  config_options:
    defaults:
      host_key_checking: false

verifier:
  name: ansible

scenario:
  test_sequence:
    - dependency
    - cleanup
    - destroy
    - syntax
    - create
    - prepare
    - converge
    - side_effect
    - verify
    - cleanup
    - destroy
dependency:
  name: galaxy
  options:
    role-file: requirements.yml
    roles-path: "${MOLECULE_EPHEMERAL_DIRECTORY}/roles"
    force: true

driver:
  name: docker

platforms:
  # ---------- Postgres (port publié + healthcheck) ----------
  - name: db
    image: postgres:15
    pre_build_image: true
    environment:
      POSTGRES_USER: odoo
      POSTGRES_PASSWORD: odoo
      POSTGRES_DB: testdb
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    published_ports:
      - "5432:5432"
    networks:
      - name: molnet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U odoo -d testdb -h 127.0.0.1 -p 5432"]
      interval: 5s
      timeout: 3s
      retries: 60
      start_period: 10s

  # ---------- Init Odoo (one-shot) ----------
  - name: odoo_init
    image: odoo:16
    pre_build_image: true
    environment:
      DB_HOST: db
      DB_USER: odoo
      DB_PASSWORD: odoo
    command:
      - /bin/sh
      - -c
      - |
        # Attendre que Postgres écoute (TCP) sur db:5432
        python3 - <<'PY'
        import socket, time, sys
        for _ in range(180):
            try:
                socket.create_connection(("db", 5432), 1).close()
                sys.exit(0)
            except OSError:
                time.sleep(2)
        sys.exit(1)
        PY
        # Initialiser la base avec le module 'base'
        exec odoo -d testdb --db_host=db --db_user=odoo --db_password=odoo \
          --without-demo=all -i base --stop-after-init
    networks:
      - name: molnet

  # ---------- Service Odoo ----------
  - name: odoo
    image: odoo:16
    pre_build_image: true
    environment:
      DB_HOST: db
      DB_USER: odoo
      DB_PASSWORD: odoo
    command:
      - /bin/sh
      - -c
      - |
        # Attendre que Postgres réponde
        python3 - <<'PY'
        import socket, time, sys
        for _ in range(180):
            try:
                socket.create_connection(("db", 5432), 1).close()
                sys.exit(0)
            except OSError:
                time.sleep(2)
        sys.exit(1)
        PY
        # Lancer Odoo
        exec odoo --database testdb \
          --db_host db --db_user odoo --db_password odoo \
          --without-demo=all \
          --http-interface 0.0.0.0 --http-port 8069
    published_ports:
      - "8069:8069"
    networks:
      - name: molnet

  # ---------- Hôte Ansible ----------
  - name: instance
    image: "${MOLECULE_IMAGE}"
    command: /sbin/init
    privileged: true
    cgroupns_mode: host
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:rw
    tmpfs:
      - /run
      - /tmp
    networks:
      - name: molnet

provisioner:
  name: ansible
  playbooks:
    converge: converge.yml
  config_options:
    defaults:
      host_key_checking: false

verifier:
  name: ansible

scenario:
  test_sequence:
    - dependency
    - cleanup
    - destroy
    - syntax
    - create
    - prepare
    - converge
    - side_effect
    - verify
    - cleanup
    - destroy
